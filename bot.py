import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
BOT_TOKEN = "8195781148:AAFc9b8CxrX8a9JYEQvN_hUAyjCNflVC5L8"                  # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω
CHANNEL_USERNAME = "@GoCrypto10"       # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = 1580610086                     # –í–∞—à Telegram ID

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ==== –ë–ê–ó–ê –î–ê–ù–ù–´–• SQLite ====
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id: int):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    users = c.fetchall()
    conn.close()
    return [user[0] for user in users]

# ==== –ö–ù–û–ü–ö–ê ====
check_sub_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
])

# ==== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'creator', 'administrator']
    except:
        return False

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    add_user(user_id)

    if await is_subscribed(user_id):
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\nhttps://teletype.in/@coinstart/bszS77gLhb")
    else:
        await message.answer(
            f"‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=check_sub_button
        )

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò ====
@dp.callback_query(F.data == "check_sub")
async def handle_check_sub(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await is_subscribed(user_id):
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://teletype.in/@coinstart/bszS77gLhb")
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", show_alert=True)

# ==== /broadcast ====
@dp.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n–ù–∞–ø—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return

    users = get_all_users()
    sent = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent += 1
        except:
            continue

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# ==== –ó–ê–ü–£–°–ö ====
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

